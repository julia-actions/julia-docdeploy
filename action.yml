name: 'Deploy package documentation'
description: 'Build and deploy the documentation for a Julia package.'
author: 'David Anthoff'

branding:
  icon: 'upload'
  color: 'gray-dark'

inputs:
  prefix:
    description: 'Value inserted in front of the julia command, e.g. for running xvfb-run julia [...]'
    default: ''
    required: false

runs:
  using: 'composite'
  steps:
    - name: Install GitHubActions.jl in its own (shared) environment
      run: |
        using Pkg
        Pkg.activate("docs-logger-env"; shared=true)
        Pkg.add(Pkg.PackageSpec(name="GitHubActions", version="0.1"))
      shell: julia --color=yes {0}
    - run: |
        # The Julia command that will be executed
        julia_cmd=( julia --color=yes --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()' )

        # Add the prefix in front of the command if there is one
        prefix="${{ inputs.prefix }}"
        [[ -n $prefix ]] && julia_cmd=( "$prefix" "${julia_cmd[@]}" )

        # Run the Julia command
        "${julia_cmd[@]}"
      shell: bash
    - run: |
        # The Julia command that will be executed
        julia_cmd=( julia --color=yes --project=docs/ -e '
            @eval Module() begin
                push!(LOAD_PATH, "@docs-logger-env") # access GitHubActions.jl
                import Logging, GitHubActions
                Logging.global_logger(GitHubActions.GitHubActionsLogger())
                pop!(LOAD_PATH)
            end
            include("docs/make.jl")' )

        # Add the prefix in front of the command if there is one
        prefix="${{ inputs.prefix }}"
        [[ -n $prefix ]] && julia_cmd=( "$prefix" "${julia_cmd[@]}" )

        # Run the Julia command
        "${julia_cmd[@]}"
      shell: bash
